//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `aiui.cfg`.
    static let aiuiCfg = Rswift.FileResource(bundle: R.hostingBundle, name: "aiui", pathExtension: "cfg")
    /// Resource file `meta_vad_16k.jet`.
    static let meta_vad_16kJet = Rswift.FileResource(bundle: R.hostingBundle, name: "meta_vad_16k", pathExtension: "jet")

    /// `bundle.url(forResource: "aiui", withExtension: "cfg")`
    static func aiuiCfg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aiuiCfg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "meta_vad_16k", withExtension: "jet")`
    static func meta_vad_16kJet(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.meta_vad_16kJet
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 28 images.
  struct image {
    /// Image `authority_icon_bluetooth`.
    static let authority_icon_bluetooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "authority_icon_bluetooth")
    /// Image `authority_icon_gps`.
    static let authority_icon_gps = Rswift.ImageResource(bundle: R.hostingBundle, name: "authority_icon_gps")
    /// Image `authority_icon`.
    static let authority_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "baobao")
    /// Image `bg_alert_agree`.
    static let bg_alert_agree = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_alert_agree")
    /// Image `bg_common_list`.
    static let bg_common_list = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_common_list")
    /// Image `home_bg_btn_upgrade_disable`.
    static let home_bg_btn_upgrade_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_bg_btn_upgrade_disable")
    /// Image `home_bg_btn_upgrade`.
    static let home_bg_btn_upgrade = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_bg_btn_upgrade")
    /// Image `home_device_cell_bg_connected`.
    static let home_device_cell_bg_connected = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_device_cell_bg_connected")
    /// Image `home_device_cell_bg`.
    static let home_device_cell_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_device_cell_bg")
    /// Image `home_device_icon`.
    static let home_device_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_device_icon")
    /// Image `home_header_icon`.
    static let home_header_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_header_icon")
    /// Image `home_header_mask`.
    static let home_header_mask = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_header_mask")
    /// Image `home_ic_feedback_input`.
    static let home_ic_feedback_input = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ic_feedback_input")
    /// Image `home_ic_upgrade`.
    static let home_ic_upgrade = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ic_upgrade")
    /// Image `home_ic_voiceInput_nor`.
    static let home_ic_voiceInput_nor = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ic_voiceInput_nor")
    /// Image `home_ic_voiceInput`.
    static let home_ic_voiceInput = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_ic_voiceInput")
    /// Image `home_icon_accessory`.
    static let home_icon_accessory = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon_accessory")
    /// Image `home_icon_feedback`.
    static let home_icon_feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "ji-fen")
    /// Image `home_icon_hardware`.
    static let home_icon_hardware = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon_hardware")
    /// Image `home_icon_help`.
    static let home_icon_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon_help")
    /// Image `home_icon_info`.
    static let home_icon_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon_info")
    /// Image `home_icon_setting`.
    static let home_icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_icon_setting")
    /// Image `home_searching_icon`.
    static let home_searching_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "home_searching_icon")
    /// Image `ic_appinfo_logo`.
    static let ic_appinfo_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_appinfo_logo")
    /// Image `ic_commom__back`.
    static let ic_commom__back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_commom__back")
    /// Image `ic_common_alert_close`.
    static let ic_common_alert_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_common_alert_close")
    /// Image `ic_common_nav_close`.
    static let ic_common_nav_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_common_nav_close")
    /// Image `ic_home_nav_index`.
    static let ic_home_nav_index = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_nav_index")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authority_icon", bundle: ..., traitCollection: ...)`
    static func authority_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authority_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authority_icon_bluetooth", bundle: ..., traitCollection: ...)`
    static func authority_icon_bluetooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authority_icon_bluetooth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "authority_icon_gps", bundle: ..., traitCollection: ...)`
    static func authority_icon_gps(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.authority_icon_gps, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_alert_agree", bundle: ..., traitCollection: ...)`
    static func bg_alert_agree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_alert_agree, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_common_list", bundle: ..., traitCollection: ...)`
    static func bg_common_list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_common_list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_bg_btn_upgrade", bundle: ..., traitCollection: ...)`
    static func home_bg_btn_upgrade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_bg_btn_upgrade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_bg_btn_upgrade_disable", bundle: ..., traitCollection: ...)`
    static func home_bg_btn_upgrade_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_bg_btn_upgrade_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_cell_bg", bundle: ..., traitCollection: ...)`
    static func home_device_cell_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_cell_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_cell_bg_connected", bundle: ..., traitCollection: ...)`
    static func home_device_cell_bg_connected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_cell_bg_connected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_device_icon", bundle: ..., traitCollection: ...)`
    static func home_device_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_device_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_header_icon", bundle: ..., traitCollection: ...)`
    static func home_header_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_header_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_header_mask", bundle: ..., traitCollection: ...)`
    static func home_header_mask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_header_mask, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_ic_feedback_input", bundle: ..., traitCollection: ...)`
    static func home_ic_feedback_input(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ic_feedback_input, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_ic_upgrade", bundle: ..., traitCollection: ...)`
    static func home_ic_upgrade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ic_upgrade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_ic_voiceInput", bundle: ..., traitCollection: ...)`
    static func home_ic_voiceInput(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ic_voiceInput, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_ic_voiceInput_nor", bundle: ..., traitCollection: ...)`
    static func home_ic_voiceInput_nor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_ic_voiceInput_nor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_icon_accessory", bundle: ..., traitCollection: ...)`
    static func home_icon_accessory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon_accessory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_icon_feedback", bundle: ..., traitCollection: ...)`
    static func home_icon_feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon_feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_icon_hardware", bundle: ..., traitCollection: ...)`
    static func home_icon_hardware(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon_hardware, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_icon_help", bundle: ..., traitCollection: ...)`
    static func home_icon_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon_help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_icon_info", bundle: ..., traitCollection: ...)`
    static func home_icon_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_icon_setting", bundle: ..., traitCollection: ...)`
    static func home_icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_icon_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home_searching_icon", bundle: ..., traitCollection: ...)`
    static func home_searching_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_searching_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_appinfo_logo", bundle: ..., traitCollection: ...)`
    static func ic_appinfo_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_appinfo_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_commom__back", bundle: ..., traitCollection: ...)`
    static func ic_commom__back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_commom__back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_common_alert_close", bundle: ..., traitCollection: ...)`
    static func ic_common_alert_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_common_alert_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_common_nav_close", bundle: ..., traitCollection: ...)`
    static func ic_common_nav_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_common_nav_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_nav_index", bundle: ..., traitCollection: ...)`
    static func ic_home_nav_index(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_nav_index, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
